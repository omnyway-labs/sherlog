# sherlog

A Clojure Library to query logs in Cloudwatch and S3

Sherlog provides APIs to
- Query and Cloudwatch Log Streams
- Filter and Fetch logs in S3 using AWS S3-select
- Create Metric Filters on Cloudwatch Logs

* Usage

Add below git coordinates in deps.edn

#+BEGIN_SRC clojure
omnyway-labs/sherlog
{:git/url "git@github.com:omnyway-labs/sherlog.git",
 :sha "0024223738ad02f9e825a9c51d0c6f6db10b953b"}
#+END_SRC

** Initialize sherlog

#+begin_src clojure
(require '[sherlog.core :as log])
(log/init! {:auth-type :profile
            :profile   (System/getenv "AWS_PROFILE")
            :region    "us-east-1"})

or initialize just the service needed
(log/init! auth service)
;;where service could be any of :log :metric :s3 or :xray
#+end_src

Other AWS auth-types:
#+BEGIN_SRC clojure
{:auth-type :env} ;; uses the AWS SECRET environment variables
or {:auth-type :default}

#+END_SRC
Make sure you have the necessary IAM permissions to Query Logs in
Cloudwatch and S3

** Querying Cloudwatch Logs

#+begin_src clojure
(log/search log-group PATTERN DURATION-IN-SECS)
#+end_src

Where PATTERN is a clojure map or a jq-like Pattern supported by
Cloudwatch

Examples:

#+begin_src clojure
(log/search log-group "ERROR" 3000)
(log/search log-group "{ $.id = \"id123\" }" 3000)
;; search takes a map; This does an *and* of the entries in the map
(log/search log-group {:id "id123" :log-type "event"} 3000)

(log/tail log-group)
;; returns a log-seq
#+end_src

** Fetch Logs in S3 using S3-select

Sherlog uses s3-select to *grep* logs in S3. Currently supports only
GZIPPed JSON encoded logs.

#+begin_src clojure
(log/select s3-bucket prefix filters)
;; example
(log/select "my-s3-bucket" "2018/11" {:log-type "event"})
#+end_src
returns a lazy-seq of the S3 logs.

To output the stream to a file

#+begin_src clojure
(log/grep "my-bucket" "2018/11" {:token "some-token"} "/tmp/data.json")
#+end_src

** Cloudwatch Metric Filters

To list the filters:
#+begin_src clojure
(log/list-metric-filters log-group type)
#+end_src
where type is *:metric* or *:subscription*


To create a Metric Filter, you could

#+begin_src clojure
(log/create-metric-filter log-group name pattern namespace initial-value)
;; example:
(log/create-metric-filter :foo "my-metric" {:log-type "error"} "errors" 1)
;; this creates a realtime counter of errors in logs

(log/delete-metric-filter log-group name)
#+end_src

#+begin_src clojure
(log/find-metrics metric-namespace)
(log/show-metric "AWS/Billing" "EstimatedCharges" :currency "1d")
#+end_src

* License - Apache 2.0

Copyright 2018 Omnyway Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

[[http://www.apache.org/licenses/LICENSE-2.0]]

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
